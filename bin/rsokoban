#!/usr/bin/env ruby

# This file is part of RSokoban, a clone of the famous sokoban game.
# Copyright 2011 Xavier Nayrac
#
# RSokoban is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

$LOAD_PATH.unshift File.dirname(__FILE__) + '/../lib'

$RSOKOBAN_PATH = File.expand_path(File.dirname(__FILE__)) + '/..'

$RSOKOBAN_DATA_PATH = File.expand_path(File.dirname(__FILE__) + '/../data')

require 'rsokoban'

unless File.exist? File.join(RSokoban::CONFIG_FOLDER, RSokoban::CONFIG_FILE)
	RSokoban::Install.create_config RSokoban::CONFIG_FOLDER
end

unless File.exist? RSokoban::RECORD_FOLDER
	RSokoban::Install.create_folder RSokoban::RECORD_FOLDER
end

tk_failed=<<EOS
Sorry, failed to load tk or tkimg library.
Please, be sure that libtcltk-ruby and libtk-img are correctly installed on
your system.
Now trying to start with curses library:
  rsokoban --curses

EOS

curses_failed=<<EOS
Sorry, failed to load curses library.
Please, be sure that curses are correctly installed on your system.
You can try the game with the portable UI.
  rsokoban --portable

EOS

# If player don't specify an explicit user interface,
# one will use tk.
option = Option.new

# I try to load the needed tk bindings. If it fails,
# one can try with curses.
if option[:ui] == :tk
	begin
		require 'tk'
		require 'tkextlib/tkimg'
		require 'tkextlib/tile'
	rescue LoadError => e
		puts tk_failed
		option.interface = :curses
	end
end

# I try to load the needed curses binding. If it fails,
# inform user and abandon.
if option[:ui] == :curses
	begin
		require 'curses'
	rescue LoadError => e
		puts curses_failed
		exit
	end
end

# Find last set
conf = RSokoban::Config.new
last_set = conf['set']
conf = nil # to be GCed ?

case option[:ui]
	when :curses
		require "rsokoban/ui/curses_console"
		ui = RSokoban::UI::CursesConsole.new
		game = RSokoban::GameFactory.create RSokoban::GameCurses, ui, last_set
	when :portable
		require "rsokoban/ui/console"
		ui = RSokoban::UI::Console.new
		game = RSokoban::GameFactory.create RSokoban::GamePortable, ui, last_set
	when :tk
		require "rsokoban/ui/tk_ui"
		require "rsokoban/ui/tk_dialogs"
		game = RSokoban::GameFactory.create RSokoban::GameTk, 'fake ui', last_set
		game.ui = RSokoban::UI::TkUI.new(game)
end

at_exit do
	conf = RSokoban::Config.new
	conf.save_set_and_level game.set_name, game.level_number
end

game.run
